/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from "node:events";
import type * as stream from "node:stream";
import type { BufferEncoding, Callback } from "unenv/runtime/_internal/types";
export declare class Readable extends EventEmitter implements stream.Readable {
    readonly readableEncoding: BufferEncoding | null;
    readonly readableEnded: boolean;
    readonly readableFlowing: boolean | null;
    readonly readableHighWaterMark: number;
    readonly readableLength: number;
    readonly readableObjectMode: boolean;
    readonly readableAborted: boolean;
    readonly readableDidRead: boolean;
    readonly closed: boolean;
    readonly errored: Error | null;
    readable: boolean;
    destroyed: boolean;
    static from(_iterable: Iterable<any> | AsyncIterable<any>, options?: stream.ReadableOptions): Readable;
    constructor(_opts?: stream.ReadableOptions);
    _read(_size: number): void;
    read(_size?: number): void;
    setEncoding(_encoding: BufferEncoding): this;
    pause(): this;
    resume(): this;
    isPaused(): boolean;
    unpipe(_destination?: any): this;
    unshift(_chunk: any, _encoding?: BufferEncoding): void;
    wrap(_oldStream: any): this;
    push(_chunk: any, _encoding?: BufferEncoding): boolean;
    _destroy(_error?: any, _callback?: Callback<any>): void;
    destroy(error?: Error): this;
    pipe<T>(_destenition: T, _options?: {
        end?: boolean;
    }): T;
    [Symbol.asyncIterator](): AsyncIterableIterator<any>;
}
