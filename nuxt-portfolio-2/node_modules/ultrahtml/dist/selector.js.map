{
  "version": 3,
  "sources": ["../src/selector.ts", "../node_modules/.pnpm/parsel-js@1.0.2/node_modules/parsel-js/dist/parsel.min.js"],
  "sourcesContent": ["import type { Node } from './index.js';\nimport { ELEMENT_NODE, TEXT_NODE, walkSync } from './index.js';\nimport type { AST, Tokens } from 'parsel-js';\nimport { parse, specificity as getSpecificity, specificityToNumber } from 'parsel-js';\n\nexport function specificity(selector: string) {\n    return specificityToNumber(getSpecificity(selector));\n}\n\nexport function matches(node: Node, selector: string): boolean {\n    const match = selectorToMatch(selector);\n    return match(node, node.parent, nthChildIndex(node, node.parent))\n}\n\nexport function querySelector(node: Node, selector: string): Node {\n    const match = selectorToMatch(selector);\n    try {\n        return select(node, (n: Node, parent?: Node, index?: number) => {\n            let m = match(n, parent, index);\n            if (!m) return false;\n            return m;\n        }, { single: true })[0];\n    } catch (e) {\n        if (e instanceof Error) {\n            throw e;\n        }\n        return e as Node;\n    }\n}\n\nexport function querySelectorAll(node: Node, selector: string): Node[] {\n    const match = selectorToMatch(selector);\n    return select(node, (n: Node, parent?: Node, index?: number) => {\n        let m = match(n, parent, index);\n        if (!m) return false;\n        return m;\n    });\n}\n\nexport default querySelectorAll;\n\ninterface Matcher {\n    (n: Node, parent?: Node, index?: number): boolean;\n}\n\nfunction select(node: Node, match: Matcher, opts: { single?: boolean } = { single: false }): Node[] {\n    let nodes: Node[] = [];\n    walkSync(node, (n, parent, index): void => {\n        if (n && n.type !== ELEMENT_NODE) return;\n        if (match(n, parent, index)) {\n            if (opts.single) throw n;\n            nodes.push(n);\n        }\n    })\n    return nodes;\n}\n\nconst getAttributeMatch = (selector: Tokens) => {\n    const { operator = '=' } = selector;\n    switch (operator) {\n        case '=': return (a: string, b: string) => a === b;\n        case '~=': return (a: string, b: string) => a.split(/\\s+/g).includes(b);\n        case '|=': return (a: string, b: string) => a.startsWith(b + '-');\n        case '*=': return (a: string, b: string) => a.indexOf(b) > -1;\n        case '$=': return (a: string, b: string) => a.endsWith(b);\n        case '^=': return (a: string, b: string) => a.startsWith(b);\n    }\n    return (a: string, b: string) => false;\n}\n\nconst nthChildIndex = (node: Node, parent?: Node) => parent?.children.filter((n: Node) => n.type === ELEMENT_NODE).findIndex((n: Node) => n === node);\nconst nthChild = (formula: string) => {\n    let [_, A = '1', B = '0'] = /^\\s*(?:(-?(?:\\d+)?)n)?\\s*\\+?\\s*(\\d+)?\\s*$/gm.exec(formula) ?? [];\n    if (A.length === 0) A = '1'\n    const a = Number.parseInt(A === '-' ? '-1' : A);\n    const b = Number.parseInt(B);\n    return (n: number) => (a * n) + b;\n}\nconst lastChild = (node: Node, parent?: Node) => parent?.children.filter((n: Node) => n.type === ELEMENT_NODE).pop() === node;\nconst firstChild = (node: Node, parent?: Node) => parent?.children.filter((n: Node) => n.type === ELEMENT_NODE).shift() === node;\nconst onlyChild = (node: Node, parent?: Node) => parent?.children.filter((n: Node) => n.type === ELEMENT_NODE).length === 1;\n\nconst createMatch = (selector: AST): Matcher => {\n    switch (selector.type) {\n        case 'type': return (node: Node) => {\n            if (selector.content === '*') return true;\n            return node.name === selector.name;\n        }\n        case 'class': return (node: Node) => node.attributes?.class?.split(/\\s+/g).includes(selector.name);\n        case 'id': return (node: Node) => node.attributes?.id === selector.name;\n        case 'pseudo-class': {\n            switch (selector.name) {\n                case 'global': return (...args) => selectorToMatch(parse(selector.argument!))(...args);\n                case 'not': return (...args) => !createMatch(selector.subtree!)(...args);\n                case 'is': return (...args) => selectorToMatch(selector.subtree!)(...args);\n                case 'where': return (...args) => selectorToMatch(selector.subtree!)(...args);\n                case 'root': return (node: Node, parent?: Node) => node.type === ELEMENT_NODE && node.name === 'html';\n                case 'empty': return (node: Node) => node.type === ELEMENT_NODE && (node.children.length === 0 || node.children.every((n: Node) => n.type === TEXT_NODE && n.value.trim() === ''));\n                case 'first-child': return (node: Node, parent?: Node) => firstChild(node, parent);\n                case 'last-child': return (node: Node, parent?: Node) => lastChild(node, parent);\n                case 'only-child': return (node: Node, parent?: Node) => onlyChild(node, parent);\n                case 'nth-child': return (node: Node, parent?: Node) => {\n                    const target = nthChildIndex(node, parent) + 1;\n                    if (Number.isNaN(Number(selector.argument))) {\n                        switch (selector.argument) {\n                            case 'odd': return Math.abs(target % 2) == 1;\n                            case 'even': return target % 2 === 0;\n                            default: {\n                                if (!selector.argument) {\n                                    throw new Error(`Unsupported empty nth-child selector!`);\n                                }\n                                const nth = nthChild(selector.argument);\n                                const elements = parent?.children.filter((n: Node) => n.type === ELEMENT_NODE);\n                                const childIndex = nthChildIndex(node, parent) + 1;\n                                for (let i = 0; i < elements.length; i++) {\n                                    let n = nth(i);\n                                    if (n > elements.length) return false;\n                                    if (n === childIndex) return true;\n                                }\n                                return false;\n                            }\n                        }\n                    }\n                    return target === Number(selector.argument);\n                }\n                default: throw new Error(`Unhandled pseudo-class: ${selector.name}!`);\n            }\n        }\n        case 'attribute': return (node: Node) => {\n            let { caseSensitive, name, value } = selector;\n            if (!node.attributes) return false;\n            const attrs = Object.entries(node.attributes as Record<string, string>);\n            for (let [attr, attrVal] of attrs) {\n                if (caseSensitive === 'i') {\n                    value = name.toLowerCase();\n                    attrVal = attr.toLowerCase();\n                }\n                if (attr !== name) continue;\n                if (!value) return true;\n                if ((value[0] === '\"' || value[0] === \"'\") && value[0] === value[value.length - 1]) {\n                    value = JSON.parse(value)\n                }\n                if (value) {\n                    return getAttributeMatch(selector)(attrVal, value);\n                }\n            }\n            return false\n        }\n        default: {\n            throw new Error(`Unhandled selector: ${selector.type}`)\n        }\n    }\n}\n\nconst selectorToMatch = (sel: string | AST): Matcher => {\n    let selector = typeof sel === 'string' ? parse(sel) : sel;\n    switch (selector.type) {\n        case 'list': {\n            const matchers = selector.list.map((s: any) => createMatch(s));\n            return (node: Node, parent?: Node, index?: number) => {\n                for (const match of matchers) {\n                    if (match(node, parent!)) return true;\n                }\n                return false;\n            }\n        }\n        case 'compound': {\n            const matchers = selector.list.map((s: any) => createMatch(s));\n            return (node: Node, parent?: Node, index?: number) => {\n                for (const match of matchers) {\n                    if (!match(node, parent!)) return false;\n                }\n                return true;\n            }\n        }\n        case 'complex': {\n            const { left, right, combinator } = selector;\n            const matchLeft = selectorToMatch(left);\n            const matchRight = selectorToMatch(right);\n            let leftMatches = new WeakSet();\n            return (node: Node, parent?: Node, i: number = 0) => {\n                if (matchLeft(node)) {\n                    leftMatches.add(node)\n                } else if (parent && leftMatches.has(parent) && (combinator === ' ')) {\n                    leftMatches.add(node);\n                }\n                if (!matchRight(node)) return false;\n                switch (combinator) {\n                    case ' ': // fall-through\n                    case '>': return parent ? leftMatches.has(parent) : false;\n                    case '~': {\n                        if (!parent) return false;\n                        for (let sibling of parent.children.slice(0, i)) {\n                            if (leftMatches.has(sibling)) return true;\n                        }\n                        return false;\n                    }\n                    case '+': {\n                        if (!parent) return false;\n                        let prevSiblings = parent.children.slice(0, i).filter((el: Node) => el.type === ELEMENT_NODE);\n                        if (prevSiblings.length === 0) return false;\n                        const prev = prevSiblings[prevSiblings.length - 1];\n                        if (!prev) return false;\n                        if (leftMatches.has(prev)) return true;\n                    }\n                    default: return false;\n                }\n            }\n        }\n        default: return createMatch(selector) as Matcher;\n    }\n}\n", "const e={attribute:/\\[\\s*(?:(?<namespace>\\*|[-\\w]*)\\|)?(?<name>[-\\w\\u{0080}-\\u{FFFF}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(?<caseSensitive>[iIsS])?\\s*)?\\]/gu,id:/#(?<name>(?:[-\\w\\u{0080}-\\u{FFFF}]|\\\\.)+)/gu,class:/\\.(?<name>(?:[-\\w\\u{0080}-\\u{FFFF}]|\\\\.)+)/gu,comma:/\\s*,\\s*/g,combinator:/\\s*[\\s>+~]\\s*/g,\"pseudo-element\":/::(?<name>[-\\w\\u{0080}-\\u{FFFF}]+)(?:\\((?<argument>\u00B6+)\\))?/gu,\"pseudo-class\":/:(?<name>[-\\w\\u{0080}-\\u{FFFF}]+)(?:\\((?<argument>\u00B6+)\\))?/gu,type:/(?:(?<namespace>\\*|[-\\w]*)\\|)?(?<name>[-\\w\\u{0080}-\\u{FFFF}]+)|\\*/gu},t=new Set([\"pseudo-class\",\"pseudo-element\"]),n=new Set([...t,\"attribute\"]),r=new Set([\"combinator\",\"comma\"]),s=new Set([\"not\",\"is\",\"where\",\"has\",\"matches\",\"-moz-any\",\"-webkit-any\",\"nth-child\",\"nth-last-child\"]),l={\"nth-child\":/(?<index>[\\dn+-]+)\\s+of\\s+(?<subtree>.+)/};s[\"nth-last-child\"]=l[\"nth-child\"];const o=Object.assign({},e);function u(e,t){let n=\"\",r=[];for(;t<e.length;t++){let s=e[t];if(\"(\"===s)r.push(s);else if(\")\"===s){if(!(r.length>0))throw new Error(\"Closing paren without opening paren at \"+t);r.pop()}if(n+=s,0===r.length)return n}throw new Error(\"Opening paren without closing paren\")}function i(e,t){if(!e)return[];var n=[e];for(var s in t){let e=t[s];for(var l=0;l<n.length;l++){var o=n[l];if(\"string\"==typeof o){e.lastIndex=0;var u=e.exec(o);if(u){let e=u.index-1,t=[],r=u[0],i=o.slice(0,e+1);i&&t.push(i),t.push({type:s,content:r,...u.groups});let a=o.slice(e+r.length+1);a&&t.push(a),n.splice(l,1,...t)}}}}let i=0;for(let e=0;e<n.length;e++){let t=n[e],s=t.length||t.content.length;\"object\"==typeof t&&(t.pos=[i,i+s],r.has(t.type)&&(t.content=t.content.trim()||\" \")),i+=s}return n}function a(r){if(!r)return null;r=r.trim();let s=[];r=r.replace(/(['\"])(\\\\\\1|.)+?\\1/g,((e,t,n,r)=>(s.push({str:e,start:r}),t+\"\u00A7\".repeat(n.length)+t)));let l,a=[],c=0;for(;(l=r.indexOf(\"(\",c))>-1;){let e=u(r,l);a.push({str:e,start:l}),r=r.substring(0,l)+\"(\"+\"\u00B6\".repeat(e.length-2)+\")\"+r.substring(l+e.length),c=l+e.length}let p=i(r,e);function f(e,t,n){for(let r of e)for(let e of p)if(n.has(e.type)&&e.pos[0]<r.start&&r.start<e.pos[1]){let n=e.content;if(e.content=e.content.replace(t,r.str),e.content!==n){o[e.type].lastIndex=0;let t=o[e.type].exec(e.content).groups;Object.assign(e,t)}}}return f(a,/\\(\u00B6+\\)/,t),f(s,/(['\"])\u00A7+?\\1/,n),p}function c(e,{list:t=!0}={}){if(t&&e.find((e=>\"comma\"===e.type))){let t=[],n=[];for(let r=0;r<e.length;r++)if(\"comma\"===e[r].type){if(0===n.length)throw new Error(\"Incorrect comma at \"+r);t.push(c(n,{list:!1})),n.length=0}else n.push(e[r]);if(0===n.length)throw new Error(\"Trailing comma\");return t.push(c(n,{list:!1})),{type:\"list\",list:t}}for(let t=e.length-1;t>=0;t--){let n=e[t];if(\"combinator\"===n.type){let r=e.slice(0,t),s=e.slice(t+1);return{type:\"complex\",combinator:n.content,left:c(r),right:c(s)}}}return 0===e.length?null:1===e.length?e[0]:{type:\"compound\",list:[...e]}}function p(e,t,n,r){if(e){if(\"complex\"===e.type)p(e.left,t,n,e),p(e.right,t,n,e);else if(\"compound\"===e.type)for(let r of e.list)p(r,t,n,e);else e.subtree&&n&&n.subtree&&p(e.subtree,t,n,e);t(e,r)}}function f(e,{recursive:t=!0,list:n=!0}={}){let r=a(e);if(!r)return null;let o=c(r,{list:n});return t&&p(o,(e=>{if(\"pseudo-class\"===e.type&&e.argument&&s.has(e.name)){let t=e.argument;const n=l[e.name];if(n){const r=n.exec(t);if(!r)return;Object.assign(e,r.groups),t=r.groups.subtree}t&&(e.subtree=f(t,{recursive:!0,list:!0}))}})),o}function g(e,t){return t=t||Math.max(...e)+1,e[0]*t**2+e[1]*t+e[2]}function h(e,{format:t=\"array\"}={}){let n=\"object\"==typeof e?e:f(e,{recursive:!0});if(!n)return null;if(\"list\"===n.type){let e=10,t=n.list.map((t=>{let n=h(t);return e=Math.max(e,...n),n})),r=t.map((t=>g(t,e)));return t[function(e){let t=e[0],n=0;for(let r=0;r<e.length;r++)e[r]>t&&(n=r,t=e[r]);return 0===e.length?-1:n}(r)]}let r=[0,0,0];return p(n,(e=>{if(\"id\"===e.type)r[0]++;else if(\"class\"===e.type||\"attribute\"===e.type)r[1]++;else if(\"type\"===e.type&&\"*\"!==e.content||\"pseudo-element\"===e.type)r[2]++;else if(\"pseudo-class\"===e.type&&\"where\"!==e.name)if(s.has(e.name)&&e.subtree){h(e.subtree).forEach(((e,t)=>r[t]+=e))}else r[1]++})),r}o[\"pseudo-element\"]=RegExp(e[\"pseudo-element\"].source.replace(\"(?<argument>\u00B6+)\",\"(?<argument>.+?)\"),\"gu\"),o[\"pseudo-class\"]=RegExp(e[\"pseudo-class\"].source.replace(\"(?<argument>\u00B6+)\",\"(?<argument>.+)\"),\"gu\");export{s as RECURSIVE_PSEUDO_CLASSES,l as RECURSIVE_PSEUDO_CLASSES_ARGS,e as TOKENS,r as TRIM_TOKENS,u as gobbleParens,c as nestTokens,f as parse,h as specificity,g as specificityToNumber,a as tokenize,i as tokenizeBy,p as walk};\n"],
  "mappings": "AACA,OAAS,gBAAAA,EAAc,aAAAC,EAAW,YAAAC,MAAgB,aCDlD,IAAMC,EAAE,CAAC,UAAU,kJAAkJ,GAAG,8CAA8C,MAAM,+CAA+C,MAAM,WAAW,WAAW,iBAAiB,iBAAiB,+DAA+D,eAAe,8DAA8D,KAAK,qEAAqE,EAAEC,EAAE,IAAI,IAAI,CAAC,eAAe,gBAAgB,CAAC,EAAEC,EAAE,IAAI,IAAI,CAAC,GAAGD,EAAE,WAAW,CAAC,EAAEE,EAAE,IAAI,IAAI,CAAC,aAAa,OAAO,CAAC,EAAEC,EAAE,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,MAAM,UAAU,WAAW,cAAc,YAAY,gBAAgB,CAAC,EAAEC,EAAE,CAAC,YAAY,0CAA0C,EAAED,EAAE,kBAAkBC,EAAE,aAAa,IAAMC,EAAE,OAAO,OAAO,CAAC,EAAEN,CAAC,EAAE,SAASO,EAAEP,EAAEC,EAAE,CAAC,IAAIC,EAAE,GAAGC,EAAE,CAAC,EAAE,KAAKF,EAAED,EAAE,OAAOC,IAAI,CAAC,IAAI,EAAED,EAAEC,GAAG,GAAS,IAAN,IAAQE,EAAE,KAAK,CAAC,UAAgB,IAAN,IAAQ,CAAC,GAAG,EAAEA,EAAE,OAAO,GAAG,MAAM,IAAI,MAAM,0CAA0CF,CAAC,EAAEE,EAAE,IAAI,CAAC,CAAC,GAAGD,GAAG,EAAMC,EAAE,SAAN,EAAa,OAAOD,CAAC,CAAC,MAAM,IAAI,MAAM,qCAAqC,CAAC,CAAC,SAASM,EAAER,EAAEC,EAAE,CAAC,GAAG,CAACD,EAAE,MAAM,CAAC,EAAE,IAAIE,EAAE,CAACF,CAAC,EAAE,QAAQI,KAAKH,EAAE,CAAC,IAAID,EAAEC,EAAEG,GAAG,QAAQC,EAAE,EAAEA,EAAEH,EAAE,OAAOG,IAAI,CAAC,IAAI,EAAEH,EAAEG,GAAG,GAAa,OAAO,GAAjB,SAAmB,CAACL,EAAE,UAAU,EAAE,IAAIO,EAAEP,EAAE,KAAK,CAAC,EAAE,GAAGO,EAAE,CAAC,IAAIP,EAAEO,EAAE,MAAM,EAAEN,EAAE,CAAC,EAAEE,EAAEI,EAAE,GAAGC,EAAE,EAAE,MAAM,EAAER,EAAE,CAAC,EAAEQ,GAAGP,EAAE,KAAKO,CAAC,EAAEP,EAAE,KAAK,CAAC,KAAKG,EAAE,QAAQD,EAAE,GAAGI,EAAE,MAAM,CAAC,EAAE,IAAIE,EAAE,EAAE,MAAMT,EAAEG,EAAE,OAAO,CAAC,EAAEM,GAAGR,EAAE,KAAKQ,CAAC,EAAEP,EAAE,OAAOG,EAAE,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,QAAQD,EAAE,EAAEA,EAAEE,EAAE,OAAOF,IAAI,CAAC,IAAIC,EAAEC,EAAEF,GAAGI,EAAEH,EAAE,QAAQA,EAAE,QAAQ,OAAiB,OAAOA,GAAjB,WAAqBA,EAAE,IAAI,CAAC,EAAE,EAAEG,CAAC,EAAED,EAAE,IAAIF,EAAE,IAAI,IAAIA,EAAE,QAAQA,EAAE,QAAQ,KAAK,GAAG,MAAM,GAAGG,CAAC,CAAC,OAAOF,CAAC,CAAC,SAASO,EAAEN,EAAE,CAAC,GAAG,CAACA,EAAE,OAAO,KAAKA,EAAEA,EAAE,KAAK,EAAE,IAAIC,EAAE,CAAC,EAAED,EAAEA,EAAE,QAAQ,sBAAuB,CAACH,EAAEC,EAAEC,EAAEC,KAAKC,EAAE,KAAK,CAAC,IAAIJ,EAAE,MAAMG,CAAC,CAAC,EAAEF,EAAE,OAAI,OAAOC,EAAE,MAAM,EAAED,EAAG,EAAE,IAAII,EAAEI,EAAE,CAAC,EAAEC,EAAE,EAAE,MAAML,EAAEF,EAAE,QAAQ,IAAIO,CAAC,GAAG,IAAI,CAAC,IAAIV,EAAEO,EAAEJ,EAAEE,CAAC,EAAEI,EAAE,KAAK,CAAC,IAAIT,EAAE,MAAMK,CAAC,CAAC,EAAEF,EAAEA,EAAE,UAAU,EAAEE,CAAC,EAAE,IAAI,OAAI,OAAOL,EAAE,OAAO,CAAC,EAAE,IAAIG,EAAE,UAAUE,EAAEL,EAAE,MAAM,EAAEU,EAAEL,EAAEL,EAAE,MAAM,CAAC,IAAIW,EAAEH,EAAEL,EAAEH,CAAC,EAAE,SAASY,EAAEZ,EAAEC,EAAEC,EAAE,CAAC,QAAQC,KAAKH,EAAE,QAAQA,KAAKW,EAAE,GAAGT,EAAE,IAAIF,EAAE,IAAI,GAAGA,EAAE,IAAI,GAAGG,EAAE,OAAOA,EAAE,MAAMH,EAAE,IAAI,GAAG,CAAC,IAAIE,EAAEF,EAAE,QAAQ,GAAGA,EAAE,QAAQA,EAAE,QAAQ,QAAQC,EAAEE,EAAE,GAAG,EAAEH,EAAE,UAAUE,EAAE,CAACI,EAAEN,EAAE,MAAM,UAAU,EAAE,IAAIC,EAAEK,EAAEN,EAAE,MAAM,KAAKA,EAAE,OAAO,EAAE,OAAO,OAAO,OAAOA,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAOW,EAAEH,EAAE,SAASR,CAAC,EAAEW,EAAER,EAAE,cAAcF,CAAC,EAAES,CAAC,CAAC,SAASD,EAAEV,EAAE,CAAC,KAAKC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAGA,GAAGD,EAAE,KAAM,GAAa,EAAE,OAAZ,OAAiB,EAAE,CAAC,IAAIC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,QAAQE,EAAE,EAAEA,EAAEH,EAAE,OAAOG,IAAI,GAAaH,EAAEG,GAAG,OAAf,QAAoB,CAAC,GAAO,EAAE,SAAN,EAAa,MAAM,IAAI,MAAM,sBAAsBA,CAAC,EAAEF,EAAE,KAAKS,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,KAAKV,EAAEG,EAAE,EAAE,GAAO,EAAE,SAAN,EAAa,MAAM,IAAI,MAAM,gBAAgB,EAAE,OAAOF,EAAE,KAAKS,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,OAAO,KAAKT,CAAC,CAAC,CAAC,QAAQA,EAAED,EAAE,OAAO,EAAEC,GAAG,EAAEA,IAAI,CAAC,IAAI,EAAED,EAAEC,GAAG,GAAkB,EAAE,OAAjB,aAAsB,CAAC,IAAIE,EAAEH,EAAE,MAAM,EAAEC,CAAC,EAAEG,EAAEJ,EAAE,MAAMC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,UAAU,WAAW,EAAE,QAAQ,KAAKS,EAAEP,CAAC,EAAE,MAAMO,EAAEN,CAAC,CAAC,CAAC,CAAC,CAAC,OAAWJ,EAAE,SAAN,EAAa,KAASA,EAAE,SAAN,EAAaA,EAAE,GAAG,CAAC,KAAK,WAAW,KAAK,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,SAAS,EAAEA,EAAEC,EAAEC,EAAEC,EAAE,CAAC,GAAGH,EAAE,CAAC,GAAeA,EAAE,OAAd,UAAmB,EAAEA,EAAE,KAAKC,EAAEC,EAAEF,CAAC,EAAE,EAAEA,EAAE,MAAMC,EAAEC,EAAEF,CAAC,UAAuBA,EAAE,OAAf,WAAoB,QAAQG,KAAKH,EAAE,KAAK,EAAEG,EAAEF,EAAEC,EAAEF,CAAC,OAAOA,EAAE,SAASE,GAAGA,EAAE,SAAS,EAAEF,EAAE,QAAQC,EAAEC,EAAEF,CAAC,EAAEC,EAAED,EAAEG,CAAC,CAAC,CAAC,CAAC,SAASS,EAAEZ,EAAE,CAAC,UAAUC,EAAE,GAAG,KAAKC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAIC,EAAEM,EAAET,CAAC,EAAE,GAAG,CAACG,EAAE,OAAO,KAAK,IAAIG,EAAEI,EAAEP,EAAE,CAAC,KAAKD,CAAC,CAAC,EAAE,OAAOD,GAAG,EAAEK,EAAGN,GAAG,CAAC,GAAoBA,EAAE,OAAnB,gBAAyBA,EAAE,UAAUI,EAAE,IAAIJ,EAAE,IAAI,EAAE,CAAC,IAAIC,EAAED,EAAE,SAAeE,EAAEG,EAAEL,EAAE,MAAM,GAAGE,EAAE,CAAC,IAAMC,EAAED,EAAE,KAAKD,CAAC,EAAE,GAAG,CAACE,EAAE,OAAO,OAAO,OAAOH,EAAEG,EAAE,MAAM,EAAEF,EAAEE,EAAE,OAAO,OAAO,CAACF,IAAID,EAAE,QAAQY,EAAEX,EAAE,CAAC,UAAU,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,CAAE,EAAEK,CAAC,CAAC,SAASO,EAAEb,EAAEC,EAAE,CAAC,OAAOA,EAAEA,GAAG,KAAK,IAAI,GAAGD,CAAC,EAAE,EAAEA,EAAE,GAAGC,GAAG,EAAED,EAAE,GAAGC,EAAED,EAAE,EAAE,CAAC,SAASc,EAAEd,EAAE,CAAC,OAAOC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,IAAIC,EAAY,OAAOF,GAAjB,SAAmBA,EAAEY,EAAEZ,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,GAAG,CAACE,EAAE,OAAO,KAAK,GAAYA,EAAE,OAAX,OAAgB,CAAC,IAAIF,EAAE,GAAGC,EAAEC,EAAE,KAAK,IAAKD,GAAG,CAAC,IAAIC,EAAEY,EAAEb,CAAC,EAAE,OAAOD,EAAE,KAAK,IAAIA,EAAE,GAAGE,CAAC,EAAEA,CAAC,CAAE,EAAEC,EAAEF,EAAE,IAAKA,GAAGY,EAAEZ,EAAED,CAAC,CAAE,EAAE,OAAOC,EAAE,SAASD,EAAE,CAAC,IAAIC,EAAED,EAAE,GAAGE,EAAE,EAAE,QAAQC,EAAE,EAAEA,EAAEH,EAAE,OAAOG,IAAIH,EAAEG,GAAGF,IAAIC,EAAEC,EAAEF,EAAED,EAAEG,IAAI,OAAWH,EAAE,SAAN,EAAa,GAAGE,CAAC,EAAEC,CAAC,EAAE,CAAC,IAAIA,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,OAAO,EAAED,EAAGF,GAAG,CAAWA,EAAE,OAAT,KAAcG,EAAE,KAAuBH,EAAE,OAAZ,SAAgCA,EAAE,OAAhB,YAAqBG,EAAE,KAAsBH,EAAE,OAAX,QAAuBA,EAAE,UAAR,KAAoCA,EAAE,OAArB,iBAA0BG,EAAE,KAA8BH,EAAE,OAAnB,gBAAmCA,EAAE,OAAZ,UAAoBI,EAAE,IAAIJ,EAAE,IAAI,GAAGA,EAAE,QAASc,EAAEd,EAAE,OAAO,EAAE,QAAS,CAACA,EAAEC,IAAIE,EAAEF,IAAID,CAAE,EAAOG,EAAE,KAAI,CAAE,EAAEA,CAAC,CAACG,EAAE,kBAAkB,OAAON,EAAE,kBAAkB,OAAO,QAAQ,qBAAkB,kBAAkB,EAAE,IAAI,EAAEM,EAAE,gBAAgB,OAAON,EAAE,gBAAgB,OAAO,QAAQ,qBAAkB,iBAAiB,EAAE,IAAI,EDKjtI,SAASe,EAAYC,EAAkB,CAC1C,OAAOC,EAAoBC,EAAeF,CAAQ,CAAC,CACvD,CAEO,SAASG,EAAQC,EAAYJ,EAA2B,CAE3D,OADcK,EAAgBL,CAAQ,EACzBI,EAAMA,EAAK,OAAQE,EAAcF,EAAMA,EAAK,MAAM,CAAC,CACpE,CAEO,SAASG,EAAcH,EAAYJ,EAAwB,CAC9D,IAAMQ,EAAQH,EAAgBL,CAAQ,EACtC,GAAI,CACA,OAAOS,EAAOL,EAAM,CAAC,EAASM,EAAeC,IAAmB,CAC5D,IAAIC,EAAIJ,EAAM,EAAGE,EAAQC,CAAK,EAC9B,OAAKC,GAAU,EAEnB,EAAG,CAAE,OAAQ,EAAK,CAAC,EAAE,EACzB,OAASC,EAAP,CACE,GAAIA,aAAa,MACb,MAAMA,EAEV,OAAOA,CACX,CACJ,CAEO,SAASC,EAAiBV,EAAYJ,EAA0B,CACnE,IAAMQ,EAAQH,EAAgBL,CAAQ,EACtC,OAAOS,EAAOL,EAAM,CAAC,EAASM,EAAeC,IAAmB,CAC5D,IAAIC,EAAIJ,EAAM,EAAGE,EAAQC,CAAK,EAC9B,OAAKC,GAAU,EAEnB,CAAC,CACL,CAEA,IAAOG,EAAQD,EAMf,SAASL,EAAOL,EAAYI,EAAgBQ,EAA6B,CAAE,OAAQ,EAAM,EAAW,CAChG,IAAIC,EAAgB,CAAC,EACrB,OAAAC,EAASd,EAAM,CAACe,EAAGT,EAAQC,IAAgB,CACvC,GAAI,EAAAQ,GAAKA,EAAE,OAASC,IAChBZ,EAAMW,EAAGT,EAAQC,CAAK,EAAG,CACzB,GAAIK,EAAK,OAAQ,MAAMG,EACvBF,EAAM,KAAKE,CAAC,CAChB,CACJ,CAAC,EACMF,CACX,CAEA,IAAMI,EAAqBrB,GAAqB,CAC5C,GAAM,CAAE,SAAAsB,EAAW,GAAI,EAAItB,EAC3B,OAAQsB,OACC,IAAK,MAAO,CAACC,EAAWC,IAAcD,IAAMC,MAC5C,KAAM,MAAO,CAACD,EAAWC,IAAcD,EAAE,MAAM,MAAM,EAAE,SAASC,CAAC,MACjE,KAAM,MAAO,CAACD,EAAWC,IAAcD,EAAE,WAAWC,EAAI,GAAG,MAC3D,KAAM,MAAO,CAACD,EAAWC,IAAcD,EAAE,QAAQC,CAAC,EAAI,OACtD,KAAM,MAAO,CAACD,EAAWC,IAAcD,EAAE,SAASC,CAAC,MACnD,KAAM,MAAO,CAACD,EAAWC,IAAcD,EAAE,WAAWC,CAAC,EAE9D,MAAO,CAACD,EAAWC,IAAc,EACrC,EAEMlB,EAAgB,CAACF,EAAYM,IAAkBA,GAAA,YAAAA,EAAQ,SAAS,OAAQS,GAAYA,EAAE,OAASC,GAAc,UAAWD,GAAYA,IAAMf,GAC1IqB,EAAYC,GAAoB,CAClC,GAAI,CAACC,EAAGC,EAAI,IAAKC,EAAI,GAAG,EAAI,8CAA8C,KAAKH,CAAO,GAAK,CAAC,EACxFE,EAAE,SAAW,IAAGA,EAAI,KACxB,IAAML,EAAI,OAAO,SAASK,IAAM,IAAM,KAAOA,CAAC,EACxCJ,EAAI,OAAO,SAASK,CAAC,EAC3B,OAAQV,GAAeI,EAAIJ,EAAKK,CACpC,EACMM,EAAY,CAAC1B,EAAYM,KAAkBA,GAAA,YAAAA,EAAQ,SAAS,OAAQS,GAAYA,EAAE,OAASC,GAAc,SAAUhB,EACnH2B,EAAa,CAAC3B,EAAYM,KAAkBA,GAAA,YAAAA,EAAQ,SAAS,OAAQS,GAAYA,EAAE,OAASC,GAAc,WAAYhB,EACtH4B,EAAY,CAAC5B,EAAYM,KAAkBA,GAAA,YAAAA,EAAQ,SAAS,OAAQS,GAAYA,EAAE,OAASC,GAAc,UAAW,EAEpHa,EAAejC,GAA2B,CAC5C,OAAQA,EAAS,UACR,OAAQ,OAAQI,GACbJ,EAAS,UAAY,IAAY,GAC9BI,EAAK,OAASJ,EAAS,SAE7B,QAAS,OAAQI,GAAY,CAxF1C,IAAA8B,EAAAC,EAwF6C,OAAAA,GAAAD,EAAA9B,EAAK,aAAL,YAAA8B,EAAiB,QAAjB,YAAAC,EAAwB,MAAM,QAAQ,SAASnC,EAAS,WACxF,KAAM,OAAQI,GAAY,CAzFvC,IAAA8B,EAyF0C,QAAAA,EAAA9B,EAAK,aAAL,YAAA8B,EAAiB,MAAOlC,EAAS,UAC9D,eACD,OAAQA,EAAS,UACR,SAAU,MAAO,IAAIoC,IAAS/B,EAAgBgC,EAAMrC,EAAS,QAAS,CAAC,EAAE,GAAGoC,CAAI,MAChF,MAAO,MAAO,IAAIA,IAAS,CAACH,EAAYjC,EAAS,OAAQ,EAAE,GAAGoC,CAAI,MAClE,KAAM,MAAO,IAAIA,IAAS/B,EAAgBL,EAAS,OAAQ,EAAE,GAAGoC,CAAI,MACpE,QAAS,MAAO,IAAIA,IAAS/B,EAAgBL,EAAS,OAAQ,EAAE,GAAGoC,CAAI,MACvE,OAAQ,MAAO,CAAChC,EAAYM,IAAkBN,EAAK,OAASgB,GAAgBhB,EAAK,OAAS,WAC1F,QAAS,OAAQA,GAAeA,EAAK,OAASgB,IAAiBhB,EAAK,SAAS,SAAW,GAAKA,EAAK,SAAS,MAAOe,GAAYA,EAAE,OAASmB,GAAanB,EAAE,MAAM,KAAK,IAAM,EAAE,OAC3K,cAAe,MAAO,CAACf,EAAYM,IAAkBqB,EAAW3B,EAAMM,CAAM,MAC5E,aAAc,MAAO,CAACN,EAAYM,IAAkBoB,EAAU1B,EAAMM,CAAM,MAC1E,aAAc,MAAO,CAACN,EAAYM,IAAkBsB,EAAU5B,EAAMM,CAAM,MAC1E,YAAa,MAAO,CAACN,EAAYM,IAAkB,CACpD,IAAM6B,EAASjC,EAAcF,EAAMM,CAAM,EAAI,EAC7C,GAAI,OAAO,MAAM,OAAOV,EAAS,QAAQ,CAAC,EACtC,OAAQA,EAAS,cACR,MAAO,OAAO,KAAK,IAAIuC,EAAS,CAAC,GAAK,MACtC,OAAQ,OAAOA,EAAS,IAAM,UAC1B,CACL,GAAI,CAACvC,EAAS,SACV,MAAM,IAAI,MAAM,uCAAuC,EAE3D,IAAMwC,EAAMf,EAASzB,EAAS,QAAQ,EAChCyC,EAAW/B,GAAA,YAAAA,EAAQ,SAAS,OAAQS,GAAYA,EAAE,OAASC,GAC3DsB,EAAapC,EAAcF,EAAMM,CAAM,EAAI,EACjD,QAAS,EAAI,EAAG,EAAI+B,EAAS,OAAQ,IAAK,CACtC,IAAItB,EAAIqB,EAAI,CAAC,EACb,GAAIrB,EAAIsB,EAAS,OAAQ,MAAO,GAChC,GAAItB,IAAMuB,EAAY,MAAO,EACjC,CACA,MAAO,EACX,EAGR,OAAOH,IAAW,OAAOvC,EAAS,QAAQ,CAC9C,UACS,MAAM,IAAI,MAAM,2BAA2BA,EAAS,OAAO,MAGvE,YAAa,OAAQI,GAAe,CACrC,GAAI,CAAE,cAAAuC,EAAe,KAAAC,EAAM,MAAAC,CAAM,EAAI7C,EACrC,GAAI,CAACI,EAAK,WAAY,MAAO,GAC7B,IAAM0C,EAAQ,OAAO,QAAQ1C,EAAK,UAAoC,EACtE,OAAS,CAAC2C,EAAMC,CAAO,IAAKF,EAKxB,GAJIH,IAAkB,MAClBE,EAAQD,EAAK,YAAY,EACzBI,EAAUD,EAAK,YAAY,GAE3BA,IAASH,EACb,IAAI,CAACC,EAAO,MAAO,GAInB,IAHKA,EAAM,KAAO,KAAOA,EAAM,KAAO,MAAQA,EAAM,KAAOA,EAAMA,EAAM,OAAS,KAC5EA,EAAQ,KAAK,MAAMA,CAAK,GAExBA,EACA,OAAOxB,EAAkBrB,CAAQ,EAAEgD,EAASH,CAAK,EAGzD,MAAO,EACX,UAEI,MAAM,IAAI,MAAM,uBAAuB7C,EAAS,MAAM,EAGlE,EAEMK,EAAmB4C,GAA+B,CACpD,IAAIjD,EAAW,OAAOiD,GAAQ,SAAWZ,EAAMY,CAAG,EAAIA,EACtD,OAAQjD,EAAS,UACR,OAAQ,CACT,IAAMkD,EAAWlD,EAAS,KAAK,IAAKmD,GAAWlB,EAAYkB,CAAC,CAAC,EAC7D,MAAO,CAAC/C,EAAYM,EAAeC,IAAmB,CAClD,QAAWH,KAAS0C,EAChB,GAAI1C,EAAMJ,EAAMM,CAAO,EAAG,MAAO,GAErC,MAAO,EACX,CACJ,KACK,WAAY,CACb,IAAMwC,EAAWlD,EAAS,KAAK,IAAKmD,GAAWlB,EAAYkB,CAAC,CAAC,EAC7D,MAAO,CAAC/C,EAAYM,EAAeC,IAAmB,CAClD,QAAWH,KAAS0C,EAChB,GAAI,CAAC1C,EAAMJ,EAAMM,CAAO,EAAG,MAAO,GAEtC,MAAO,EACX,CACJ,KACK,UAAW,CACZ,GAAM,CAAE,KAAA0C,EAAM,MAAAC,EAAO,WAAAC,CAAW,EAAItD,EAC9BuD,EAAYlD,EAAgB+C,CAAI,EAChCI,EAAanD,EAAgBgD,CAAK,EACpCI,EAAc,IAAI,QACtB,MAAO,CAACrD,EAAYM,EAAegD,EAAY,IAAM,CAMjD,IALIH,EAAUnD,CAAI,GAEPM,GAAU+C,EAAY,IAAI/C,CAAM,GAAM4C,IAAe,MAC5DG,EAAY,IAAIrD,CAAI,EAEpB,CAACoD,EAAWpD,CAAI,EAAG,MAAO,GAC9B,OAAQkD,OACC,QACA,IAAK,OAAO5C,EAAS+C,EAAY,IAAI/C,CAAM,EAAI,OAC/C,IAAK,CACN,GAAI,CAACA,EAAQ,MAAO,GACpB,QAASiD,KAAWjD,EAAO,SAAS,MAAM,EAAGgD,CAAC,EAC1C,GAAID,EAAY,IAAIE,CAAO,EAAG,MAAO,GAEzC,MAAO,EACX,KACK,IAAK,CACN,GAAI,CAACjD,EAAQ,MAAO,GACpB,IAAIkD,EAAelD,EAAO,SAAS,MAAM,EAAGgD,CAAC,EAAE,OAAQG,GAAaA,EAAG,OAASzC,CAAY,EAC5F,GAAIwC,EAAa,SAAW,EAAG,MAAO,GACtC,IAAME,EAAOF,EAAaA,EAAa,OAAS,GAChD,GAAI,CAACE,EAAM,MAAO,GAClB,GAAIL,EAAY,IAAIK,CAAI,EAAG,MAAO,EACtC,SACS,MAAO,GAExB,CACJ,SACS,OAAO7B,EAAYjC,CAAQ,EAE5C",
  "names": ["ELEMENT_NODE", "TEXT_NODE", "walkSync", "e", "t", "n", "r", "s", "l", "o", "u", "i", "a", "c", "p", "f", "g", "h", "specificity", "selector", "g", "h", "matches", "node", "selectorToMatch", "nthChildIndex", "querySelector", "match", "select", "parent", "index", "m", "e", "querySelectorAll", "selector_default", "opts", "nodes", "walkSync", "n", "ELEMENT_NODE", "getAttributeMatch", "operator", "a", "b", "nthChild", "formula", "_", "A", "B", "lastChild", "firstChild", "onlyChild", "createMatch", "_a", "_b", "args", "f", "TEXT_NODE", "target", "nth", "elements", "childIndex", "caseSensitive", "name", "value", "attrs", "attr", "attrVal", "sel", "matchers", "s", "left", "right", "combinator", "matchLeft", "matchRight", "leftMatches", "i", "sibling", "prevSiblings", "el", "prev"]
}
