{"version":3,"sources":["../../../../src/checkers/vueTsc/prepareVueTsc.ts","../../../../../../node_modules/.pnpm/tsup@6.2.2_typescript@4.5.5/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["import fs from 'fs'\nimport { createRequire } from 'module'\nimport path, { dirname } from 'path'\nimport { fileURLToPath } from 'url'\nconst _require = createRequire(import.meta.url)\n\n// isomorphic __dirname https://antfu.me/posts/isomorphic-dirname\nconst _filename = fileURLToPath(import.meta.url)\nconst _dirname = dirname(_filename)\n\nlet proxyPath: string\nlet createProgramFunction: string\ntry {\n  // vue-tsc exposes the proxy in vue-tsc/out/index after v1.0.14\n  proxyPath = _require.resolve('vue-tsc/out/index')\n  createProgramFunction = 'createProgram'\n} catch (e) {\n  // vue-tsc exposes the proxy in vue-tsc/out/proxy before v1.0.14\n  proxyPath = _require.resolve('vue-tsc/out/proxy')\n  createProgramFunction = 'createProgramProxy'\n}\n\nconst textToReplace: { target: string; replacement: string }[] = [\n  {\n    target: `ts.supportedTSExtensions = [[\".ts\", \".tsx\", \".d.ts\"], [\".cts\", \".d.cts\"], [\".mts\", \".d.mts\"]];`,\n    replacement: `ts.supportedTSExtensions = [[\".ts\", \".tsx\", \".d.ts\"], [\".cts\", \".d.cts\"], [\".mts\", \".d.mts\"], [\".vue\"]];`,\n  },\n  {\n    target: `ts.supportedJSExtensions = [[\".js\", \".jsx\"], [\".mjs\"], [\".cjs\"]];`,\n    replacement: `ts.supportedJSExtensions = [[\".js\", \".jsx\"], [\".mjs\"], [\".cjs\"], [\".vue\"]];`,\n  },\n\n  {\n    target: `var allSupportedExtensions = [[\".ts\", \".tsx\", \".d.ts\", \".js\", \".jsx\"], [\".cts\", \".d.cts\", \".cjs\"], [\".mts\", \".d.mts\", \".mjs\"]];`,\n    replacement: `var allSupportedExtensions = [[\".ts\", \".tsx\", \".d.ts\", \".js\", \".jsx\"], [\".cts\", \".d.cts\", \".cjs\"], [\".mts\", \".d.mts\", \".mjs\"], [\".vue\"]];`,\n  },\n\n  // proxy createProgram apis\n  {\n    target: `function createIncrementalProgram(_a) {`,\n    replacement: `function createIncrementalProgram(_a) { console.error('incremental mode is not yet supported'); throw 'incremental mode is not yet supported';`,\n  },\n  {\n    target: `function createProgram(rootNamesOrOptions, _options, _host, _oldProgram, _configFileParsingDiagnostics) {`,\n    replacement: `function createProgram(rootNamesOrOptions, _options, _host, _oldProgram, _configFileParsingDiagnostics) { return require(${JSON.stringify(\n      proxyPath\n    )}).${createProgramFunction}(...arguments);`,\n  },\n  {\n    target: `ts.executeCommandLine(ts.sys, ts.noop, ts.sys.args);`,\n    replacement: `module.exports = ts`,\n  },\n]\n\nexport function prepareVueTsc() {\n  // 1. copy typescript to folder\n  const targetTsDir = path.resolve(_dirname, 'typescript-vue-tsc')\n  const vueTscFlagFile = path.resolve(targetTsDir, 'vue-tsc-resolve-path')\n\n  let shouldPrepare = true\n  const targetDirExist = fs.existsSync(targetTsDir)\n  if (targetDirExist) {\n    try {\n      const targetTsVersion = _require(path.resolve(targetTsDir, 'package.json')).version\n      const currTsVersion = _require('typescript/package.json').version\n      // check fixture versions before re-use\n      if (\n        targetTsVersion === currTsVersion &&\n        fs.existsSync(vueTscFlagFile) &&\n        fs.readFileSync(vueTscFlagFile, 'utf8') === proxyPath\n      ) {\n        shouldPrepare = true\n      }\n    } catch {\n      shouldPrepare = true\n    }\n  }\n\n  if (shouldPrepare) {\n    rimraf(targetTsDir)\n    fs.mkdirSync(targetTsDir)\n    const sourceTsDir = path.resolve(_require.resolve('typescript'), '../..')\n    copyDirRecursively(sourceTsDir, targetTsDir)\n    fs.writeFileSync(vueTscFlagFile, proxyPath)\n\n    // 2. sync modification of lib/tsc.js with vue-tsc\n    const tscJs = _require.resolve(path.resolve(targetTsDir, 'lib/tsc.js'))\n    modifyFileText(tscJs, textToReplace)\n  }\n\n  return { targetTsDir: targetTsDir }\n}\n\nfunction modifyFileText(\n  filePath: string,\n  textToReplace: { target: string; replacement: string }[]\n) {\n  const text = fs.readFileSync(filePath, 'utf8')\n  let newText = text\n  for (const { target, replacement } of textToReplace) {\n    newText = newText.replace(target, replacement)\n  }\n  fs.writeFileSync(filePath, newText)\n}\n\nfunction copyDirRecursively(src: string, dest: string) {\n  const files = fs.readdirSync(src, { withFileTypes: true })\n  for (const file of files) {\n    const srcPath = path.join(src, file.name)\n    const destPath = path.join(dest, file.name)\n    if (file.isDirectory()) {\n      fs.mkdirSync(destPath, { recursive: true })\n      copyDirRecursively(srcPath, destPath)\n    } else {\n      fs.copyFileSync(srcPath, destPath)\n    }\n  }\n}\n\n/**\n * https://stackoverflow.com/a/42505874\n */\nfunction rimraf(dir_path: string) {\n  if (fs.existsSync(dir_path)) {\n    fs.readdirSync(dir_path).forEach((entry) => {\n      const entry_path = path.join(dir_path, entry)\n      if (fs.lstatSync(entry_path).isDirectory()) {\n        rimraf(entry_path)\n      } else {\n        fs.unlinkSync(entry_path)\n      }\n    })\n    fs.rmdirSync(dir_path)\n  }\n}\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":"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","names":["path","fs","textToReplace"]}